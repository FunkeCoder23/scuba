#!/usr/bin/env python

# SCUBA - Simple Container-Utilizing Build Architecture
# (C) 2015 Jonathon Reinhart
# https://github.com/JonathonReinhart/scuba

import os, os.path
import sys
import yaml
import subprocess
import shlex

SCUBA_YML = '.scuba.yml'
BUILD_DIR = '/build'

def appmsg(fmt, *args):
    print 'scuba: ' + fmt.format(*args)

def load_config():
    try: 
        with open(SCUBA_YML) as f:
            config = yaml.safe_load(f)
    except IOError as e:
        if e.errno == 2:
            # Pretty message for the most common error
            appmsg('No {0} found.', SCUBA_YML)
        else:
            appmsg('Error opening {0}: {1}', SCUBA_YML, e)
        sys.exit(2)

    required_nodes = ('image',)
    optional_nodes = ()

    # Check for missing required nodes
    missing = [n for n in required_nodes if not n in config]
    if missing:
        appmsg('{0}: Required node{1} missing: {2}', SCUBA_YML,
                's' if len(missing) > 1 else '', ', '.join(missing))
        sys.exit(2)

    # Check for unrecognized nodes
    extra = [n for n in config if not n in required_nodes + optional_nodes]
    if extra:
        appmsg('{0}: Unrecognized node{1}: {2}', SCUBA_YML,
                's' if len(extra) > 1 else '', ', '.join(extra))
        sys.exit(2)

    return config

def make_vol_opt(hostdir, contdir, options=None):
    '''Generate a docker volume option'''
    vol = '--volume={0}:{1}'.format(hostdir, contdir)
    if options != None:
        if isinstance(options, basestring):
            options = (options,)
        vol += ':' + ','.join(options)
    return vol

def main():
    config = load_config()

    args = ['docker', 'run',
        # interactive: keep STDIN open
        '-i',

        # allocate TTY
        '-t',

        # remove container after exit
        '--rm',

        # Mount build directory...
        # NOTE: This tells Docker to re-label the directory for compatibility
        # with SELinux. See `man docker-run` for more information.
        make_vol_opt(os.getcwd(), BUILD_DIR, 'z'),

        # ...and set the working dir there
        '-w', BUILD_DIR,

        # Run as the current user:group
        '--user={0}:{1}'.format(os.getuid(), os.getgid()),

        # Docker image
        config['image'],
    ]

    # Command, args
    args += sys.argv[1:]

    #from pprint import pprint; pprint(args)
    #return 42

    return subprocess.call(args)

if __name__ == '__main__':
    main()
